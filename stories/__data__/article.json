{
  "text":
    "<p>This post will teach you about <a href=\"https://nec.is/writing/transform-your-codebase-using-codemods/#jscodeshift\">jscodeshift</a>, a super-useful tool to step by step transform large codebases using small changes. From the basics, like how to <a href=\"https://nec.is/writing/transform-your-codebase-using-codemods/#traverse\">traverse</a> your code and how to <a href=\"https://nec.is/writing/transform-your-codebase-using-codemods/#build\">build code</a>, through some detailed look at the data you work with, like <a href=\"https://nec.is/writing/transform-your-codebase-using-codemods/#collection\">Collections</a> and <a href=\"https://nec.is/writing/transform-your-codebase-using-codemods/#nodepath\">NodePaths</a>.</p><p>At the end I’ll write about <a href=\"https://nec.is/writing/transform-your-codebase-using-codemods/#ignore-patterns\">ignore patterns</a> for jscodeshift, plus some <a href=\"https://nec.is/writing/transform-your-codebase-using-codemods/#best-practices\">best practices</a> we’ve learned and handling <a href=\"https://nec.is/writing/transform-your-codebase-using-codemods/#edge-cases\">edge cases</a> in code</p><p>Codemods are small programs designed to alter large codebases with a very specific change.  Historically they were using simple string replacement techniques, and later complex regular expressions.</p><p>Luckily for us these days, source code in many languages can be traversed using an Abstract Source Tree (AST) which makes these changes more safe, powerful and easy at the same time. Let’s see how useful these little programs can be!</p><p>For example, if you wish to upgrade a library you use, but it introduced a breaking change, by radically altering the signature of its methods. You could search &amp; replace all the occurrences of the used library, but that has many downsides:</p><ul>\n<li>manual, repetitive and boring - you may miss something</li>\n<li>creates a huge changeset</li>\n<li>teammates working on the codebase on a different branch has to merge and resolve conflicts </li>\n</ul><p>If you can forge a tool to do the changes for you, automated, all these can be solved!</p><ul>\n<li>it’s automated, you just have to write the codemod </li>\n<li>the changeset is basically the codemod only</li>\n<li>run the change, and test it before release, test it on branches, the result of the codemod is the same everywhere</li>\n<li>if a conflict happens, your teammates can ignore your codemod-enhanced version, accept theirs, and re-run your codemod again on their code - easily resolved!</li>\n</ul><p><a name=\"jscodeshift\"></a></p><p>This is how installing jscodeshift, and running codemods on a codebase looks like</p><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">\n        \n$ <span class=\"token function\">npm</span> i jscodeshift -g $ jscodeshift -t some-codemod.js /path/to/the/codebase\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A codemod is a function, which receives the source code (as a string), the jscodeshift API and some options, and expected to return the source code as a string. </p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> source<span class=\"token punctuation\">,</span> path <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> file\n  <span class=\"token comment\" spellcheck=\"true\">// `source` is the source code in file at `path`</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> jscodeshift<span class=\"token punctuation\">,</span> stats <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> api <span class=\"token comment\" spellcheck=\"true\">// use `jscodeshift` to access the API</span> <span class=\"token comment\" spellcheck=\"true\">// `stats` is a function to collect statistics </span> <span class=\"token comment\" spellcheck=\"true\">// during --dry runs</span> <span class=\"token comment\" spellcheck=\"true\">// do some magic here...</span>   <span class=\"token comment\" spellcheck=\"true\">// return the changed source as string</span>\n  <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name=\"traverse\"></a></p><p>Finding a certain code structure can be done simply by providing a pattern or the absolute specific way, using filters, depending on exactly what you’re searching for.</p><p>If you can explicitly tell yourself what is that you are looking for, you can show a source tree structure pattern to jscodeshift to look for. For example, let’s find any <code>smoosh</code> method calls on a <code>library</code>  object</p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \n<span class=\"token comment\" spellcheck=\"true\">// the jscodeshift api has been assigned to j previously</span> <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">j</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> ast<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">.</span>MemberExpression<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> object<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>   name<span class=\"token punctuation\">:</span> <span class=\"token string\">'library'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>   name<span class=\"token punctuation\">:</span> <span class=\"token string\">'smoosh'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If you want to look for some computed value, you can use a filter</p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \n<span class=\"token comment\" spellcheck=\"true\">// the jscodeshift api has been assigned to j previously</span> <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">j</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// find all MemberExpressions on object `obj.`</span>\nast<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span> j<span class=\"token punctuation\">.</span>MemberExpression<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>   object<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'obj'</span>   <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>property   <span class=\"token comment\" spellcheck=\"true\">// filter all accessed properties that starts with `get` </span> <span class=\"token keyword\">return</span> <span class=\"token regex\">/^get[A-Z].*/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name=\"build\"></a></p><p>After you’ve found what you’re looking for, it’s time to create nodes for replacement or insertion. Jscodeshift wraps the Builder API from <code>recast</code>,  so let’s use it! The difference from the matcher constants, like <code>jscodeshift.Literal</code>  is that they start lowercased, and all of them is a function call, like <code>jscodeshift.literal(&#39;foo&#39;)</code>. You might guess, this will create a simple string literal, with the string “foo”.</p><p>These builders have different function signatures, depending on the properties of the nodes they create. <code>Literal</code> needs a simple string as the value, but a CallExpression for example, needs much more, like a callee, and the arguments list:</p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \n<span class=\"token comment\" spellcheck=\"true\">// create a function call that looks like</span>\n<span class=\"token comment\" spellcheck=\"true\">// \"myfunc(someVar, 'bar')\"</span>\n<span class=\"token keyword\">const</span> callExpr <span class=\"token operator\">=</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">callExpression</span><span class=\"token punctuation\">(</span>\n  j<span class=\"token punctuation\">.</span><span class=\"token function\">identifier</span><span class=\"token punctuation\">(</span>‘myFunc’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">[</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">indentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someVar'</span><span class=\"token punctuation\">)</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">literal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The documentation for these is basically nonexistent, but if you take a look at the definitions over <a href=\"https://github.com/benjamn/ast-types/tree/master/def\" target=\"_blank\" rel=\"noopener\"><code>ast-types</code> </a> it’s actually readable. For example in the <a href=\"https://github.com/benjamn/ast-types/blob/master/def/core.js\" target=\"_blank\" rel=\"noopener\">core ES definitions</a>  the <code>CallExpression</code>  looks like this</p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \n<span class=\"token function\">def</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CallExpression\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">bases</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expression\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"callee\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"arguments\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"callee\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">def</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expression\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// See comment for NewExpression above.</span> <span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arguments\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token function\">def</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expression\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In this - and every definition in there - the <code>build</code> contains the expected function signature, and every field is described for what type is required.</p><p>With the help of the ast-types definitions, you can create powerful builder structures, and update your code easy. </p><p><strong>Note:</strong> Using the builder API with jscodeshift methods does not necessary ensures that the resulting code will be valid! So always test your codemod, double-check what it does.<br>Example:</p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \nast\n  <span class=\"token punctuation\">.</span><span class=\"token function\">findVariableDeclarators</span><span class=\"token punctuation\">(</span>‘foo’<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insertAfter</span><span class=\"token punctuation\">(</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">indentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// this alters code from</span>\n<span class=\"token comment\" spellcheck=\"true\">//\t const foo = 'asd';</span>\n<span class=\"token comment\" spellcheck=\"true\">// to</span>\n<span class=\"token comment\" spellcheck=\"true\">//\t const foo = 'ast, bar; </span>\n<span class=\"token comment\" spellcheck=\"true\">// which is invalid!</span>     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now let’s take a deeper look at the data structures you can work with when creating a codemod.</p><p>The data you can retrieve from jscodeshift consists Collections, NodePaths, and Nodes.</p><ul>\n<li>Collection is an array of NodePaths, spiced with some helper methods</li>\n<li><a href=\"https://nec.is/writing/transform-your-codebase-using-codemods/#nodepath\">NodePaths</a> are wrappers around Nodes to provide context and helpers,</li>\n<li>Nodes are the actual AST nodes</li>\n</ul><p><a name=\"collection\"></a></p><p>It’s an array of NodePaths, usually the result of <code>find</code> or <code>filter</code> or similar traversing and searching methods.</p><p>The basic methods are relatively <a href=\"https://github.com/facebook/jscodeshift/wiki/jscodeshift-Documentation\" target=\"_blank\" rel=\"noopener\">well-documented</a> but there are some useful ones missing from there, or just need an example.</p><p><strong>paths()</strong></p><p>Get the NodePaths from the collection in an array</p><p><strong>closest()</strong></p><p>Returns the closest provided node type up in the AST to each of the nodes.</p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \n<span class=\"token comment\" spellcheck=\"true\">// find all member expressions of the `obj` object</span>\nast<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n  j<span class=\"token punctuation\">.</span>MemberExpression<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> object<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'obj'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">.</span>CallExpression<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// returns method calls like `obj.foo()` </span>\n<span class=\"token comment\" spellcheck=\"true\">// but not the property access like `obj.bar`</span>     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>findVariableDeclarators([name])</strong></p><p>find variable declarations in collection, optionally filtered by <code>name</code></p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \nast<span class=\"token punctuation\">.</span><span class=\"token function\">findVariableDeclarators</span><span class=\"token punctuation\">(</span>‘foo’<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">///same as running this</span>\nast<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>jscodeshift<span class=\"token punctuation\">.</span>VariableDeclarator<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> ‘foo’ <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>insertAfter()</strong><br><strong>insertBefore()</strong></p><p>insert nodes after each collection item. Pass in an array of Nodes, using the Builder API - but unfortunately, usage is not that trivial.<br>For example, if you want to simply add a new line below a selected Node, you have to traverse up to the closest ExpressionStatement and insert after that one.</p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \nast <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">.</span>CallExpression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">.</span>ExpressionStatement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">insertAfter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">expressionStatement</span><span class=\"token punctuation\">(</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">callExpression</span><span class=\"token punctuation\">(</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">identifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'asd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can pass a function to insertAfter/Before, which returns the array of Nodes to be inserted.</p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \n<span class=\"token comment\" spellcheck=\"true\">// insert a track() call after every function call</span>\n<span class=\"token comment\" spellcheck=\"true\">// passing in their numeric index in the code</span>\n<span class=\"token keyword\">const</span> createTracker <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">expressionStatement</span><span class=\"token punctuation\">(</span>   j<span class=\"token punctuation\">.</span><span class=\"token function\">callExpression</span><span class=\"token punctuation\">(</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">identifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'track'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">[</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">literal</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>   <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>  ast\n   <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">.</span>CallExpression<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">.</span>ExpressionStatement<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">insertAfter</span><span class=\"token punctuation\">(</span>createTracker<span class=\"token punctuation\">)</span>     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>remove()</strong><br>remove the collection from the AST</p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \nast<span class=\"token punctuation\">.</span><span class=\"token function\">findVariableDeclarators</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> ast<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">.</span>CallExpression<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> callee<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> object<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'console'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'log'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>renameTo(newName)</strong></p><p>renames all Identifiers in the collection of <em>VariableDeclarators</em> to <code>newName</code></p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \n<span class=\"token function\">jscodeshift</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findVariableDeclarators</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">renameTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>replaceWith([nodes|function])</strong></p><p>replace collection with the provided array of nodes of the result of the provided function</p><p>this function receives the NodePath and the iteration index as arguments and expected to return an Array-like collection</p><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \n<span class=\"token comment\" spellcheck=\"true\">// replace variable name ‘lorem’ to ‘ipsum’ at every code occurrence</span>\nast<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">.</span>Identifier<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">:</span> ‘lorem’ <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">identifier</span><span class=\"token punctuation\">(</span>‘ipsum’<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class=\"line-numbers language-js\"><code class=\"language-js\">\n        \n<span class=\"token comment\" spellcheck=\"true\">// replace console.log() to another logging target,</span>\n<span class=\"token comment\" spellcheck=\"true\">// while keeping the passed arguments</span>\n  ast<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">.</span>CallExpression<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> callee<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>   object<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'console'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   property<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'log'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">callExpression</span><span class=\"token punctuation\">(</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">identifier</span><span class=\"token punctuation\">(</span>‘mylogger’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  path<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>arguments <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name=\"nodepath\"></a></p><p>These methods come from recast</p><p><strong>canBeFirstInStatement(), firstInStatement()</strong></p><p>Check a Node’s place in a statement, and if a Node can be first.</p><p><strong>needsParens()</strong></p><p>Check if a Node needs to be wrapped in parentheses (it’s mainly used by the <code>recast</code> code builder)</p><p><strong>prune()</strong></p><p>Remove a node and its parent, if it would leave a redundant AST node - comes from <code>ast-types</code></p><p><strong>replace()</strong></p><p>Replace a Node with another one</p><p><strong>Properties</strong></p><ul>\n<li><em>parent</em> - traversing up the AST, the parent NotePath</li>\n<li><em>scope</em> - get scope information, like these:<ul>\n<li><em>isGlobal</em> - is it the global scope</li>\n<li><em>bindings</em> - get scope bindings (honestly, I could not get my head around this)</li>\n<li><em>depth</em> - how deep is this node in the scope chain</li>\n<li><em>path</em> - the NodePath of the scope in the AST</li>\n<li><em>getGlobalScope()</em>  - access the global scope</li>\n</ul>\n</li>\n<li><em>node, value</em> - return the wrapped Node</li>\n</ul><blockquote>\n<p>It’s OK to not know the structure of every AST node type.</p>\n</blockquote><p>This is 100% true, no-one should say that every true JS developer should know these. To help, there is a wonderful online tool called <a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">ASTExplorer</a>, where you can write/paste the code, and see the relevant AST nodes on the right, as you click in your code. You can test and debug your jscodeshift codemod right there, just pick the right option in the “Transform” menu at the top.</p><p><a name=\"ignore-patterns\"></a></p><p>Just like in a .gitignore file, you can set paths or path fragments, that should be avoided by your codemods. We skip 3rd party libraries, node_modules, vendor modules for example. You can put these in a file, and pass it to the runner, like this</p><pre class=\"line-numbers language-bash\"><code class=\"language-bash\">\n        \n$ jscodeshift -t some-codemod.js --ignore-config ignores.txt /path/to/the/codebase     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Here’s an example file for jscodeshift ignore-config</p><pre class=\"line-numbers language-txt\"><code class=\"language-txt\">\n        \nvendor\nnode_modules\n*config*.js     <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name=\"best-practices\"></a></p><p>We started to write codemods on separate workbranches/pull requests. Only the codemod is committed, and any changes it may need to run, and any dependencies it brings to, or updates in the codebase. In a nice docblock at the top of the file, we describe what this codemod should do, what it should <em>not</em> do, and include the exact CLI commands we’ve run it - it’s useful when your teammates need to run it, or if a custom ignore pattern was used.</p><p>Then we run the codemod on a pre-release branch, where it’s tested and released before merging the whole changeset to master.</p><p>Anyone who has a conflict after pulling master, can ignore the change, and re-run the codemod on the files they’re working with.</p><p><a name=\"edge-cases\"></a></p><p>If you find a piece of code that has some unconventional approach compared to what you try to modify, do not over-engineer and over-complicate your codemod. </p><p>You can create a separate codemod for that use case, or - even better - you can refactor the unconventional approach in a way, that your codemod can handle.</p><p>I hope you’ve found this post useful, and it will help you take your codebase to the next level of JavaScript! Here’s a collection to <a href=\"https://github.com/cpojer/js-codemod/\" target=\"_blank\" rel=\"noopener\">update your codebase to modern JS</a> and a <a href=\"https://github.com/jhgg/js-transforms\" target=\"_blank\" rel=\"noopener\">small collection of other useful examples</a>.</p>"
}
